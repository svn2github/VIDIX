#!/bin/bash

. ./functions
init_functions

# DHA/vidix version number
VERSION_MAJOR=1
VERSION_MINOR=5
VERSION_MICRO=0

ENABLED_LIST=(
    "shared|build shared libraries",
)

DISABLED_LIST=(
    "gcov|compile gnu coverage information into PROGRAM",
    "profile|compile profiling information into PROGRAM",
    "static|build static libraries",
)

AUTOCONF_LIST=(
    "ENABLED_LIST",
    "DISABLED_LIST"
)

PATH_LIST=(
    "prefix|architecture-independent files|/usr/local",
    "exec_prefix|architecture-dependent files|\$prefix",
    "bindir|user executables|\$exec_prefix/bin",
    "libdir|object code libraries|\$exec_prefix/lib",
    "datadir|read-only architecture-independent data|\$prefix/share/vidix",
    "confdir|read-only configuration files|\$prefix/share/vidix"
)

SYSTYPES_LIST=(
    "build|configure for building on BUILD [guessed]",
    "host|cross-compile to build program to run on HOST [BUILD]",
    "cc|use this C compiler to build PROGRAM|gcc",
    "cxx|use this C++ compiler to build PROGRAM|g++",
    "as|use this ASSEMBLER to build PROGRAM|as",
    "ld|use this LINKER to build PROGRAM|gcc",
    "ldxx|use this LINKER to build PROGRAM with C++ sources|g++",
    "ldconfig|use this LDCONFIG to install PROGRAM|ldconfig",
    "install|use this INSTALL to install PROGRAM|install",
    "pkg_config|use this PKG-CONFIG to configure PROGRAM|pkg-config",
    "debug|compile debugging information into PROGRAM|0",
    "language|force this language as default for PROGRAM (Available: $LANGUAGES)|$linguas"
)

SYSCONF_LIST=(
    "SYSTYPES_LIST",
    "PROGNAME_LIST",
    "PATH_LIST"
)

EXTRA_LIST=(
    "asflags|add these FLAGS to [\$ASFLAGS=$ASFLAGS]",
    "cflags|add these FLAGS to [\$CFLAGS=$CFLAGS]",
    "cxxflags|add these FLAGS to [\$CXXFLAGS=$CXXFLAGS]",
    "ldflags|add these FLAGS to [\$LDFLAGS=$LDFLAGS]",
    "ldxxflags|add these FLAGS to [\$LDXXFLAGS=$LDXXFLAGS]",
    "extralibs|add these LIBS to [\$LIBS=$LIBS]"
)

ADD_LIST=(
    "EXTRA_LIST",
)

ENVIRONMENT_LIST=(
    "MAKE|Make command (example: 'make -j')|make",
    "AS|Assembler command|as",
    "CC|C compiler command (example: 'gcc -m64')|cc",
    "CXX|C++ compiler command (example: 'g++ -m64')|cxx",
    "AWK|AWK programming language (after names of its inventors: Aho Weinberger Kernighan)",
    "CFLAGS|C compiler flags (example: '-funit-at-a-time')",
    "CXXFLAGS|C++ compiler flags (example: '-Weffc++')",
    "LDFLAGS|linker flags (example: '-L/opt/lib64')",
    "LDXXFLAGS|C++ linker flags (example: '-L/opt/lib64')",
    "LIBS|additional libraries (example: 'LIBS=-lacml_mv')",
    "DESTDIR|specifies base of installation"
)

HELP_LIST=(
    "PATH_LIST|Fine tuning of the installation directories|--",
    "SYSTYPES_LIST|System types|--",
    "EXTRA_LIST|Extralist|--",
    "ENABLED_LIST|Optional list of enabled fautures|--disable-",
    "DISABLED_LIST|Optional list of disabled fautures|--enable-",
    "ENVIRONMENT_LIST|Environment variables|  "
)

DEFAULT_LIST=(
    "PATH_LIST|Fine tuning of the installation directories|--",
    "SYSTYPES_LIST|System types|--",
    "EXTRA_LIST|Extralist|--"
)

enable_list "ENABLED_LIST"
disable_list "DISABLED_LIST"
make_environment "ENVIRONMENT_LIST"

for ac_option do
  optval="${ac_option#*=}"
  case "$ac_option" in
  --help)
    print_help "HELP_LIST"
    exit 0
    ;;
  --enable-*=*|--disable-*=*)
    eval $(echo "${ac_option%%=*}" | sed 's/--/action=/;s/-/ thing=/')
    in_list "AUTOCONF_LIST" ${thing} || bad_options="$ac_option $bad_options"
    if test "$action" = "disable"; then
      test "${optval}" = "no" && action=enable
    else
      test "${optval}" = "no" && action=disable
    fi
    echo "$action ${thing}"
    $action ${thing}
    ;;

    --enable-?*|--disable-?*)
    eval $(echo "$ac_option" | sed 's/--/action=/;s/-/ thing=/;s/-/_/g')
    in_list "AUTOCONF_LIST" ${thing} || bad_options="$ac_option $bad_options"
    $action ${thing}
    ;;
    *)
    optname="${ac_option%%=*}"
    optname="${optname#--}"
    optname=${optname//-/_}
    if in_list "SYSCONF_LIST" $optname ; then
        eval $optname=$optval
    elif in_list "ADD_LIST" $optname ; then
	action="add_$optname"
	$action ${optval}
    else
        bad_options="$ac_option $bad_options"
    fi
    ;;
  esac
done
make_defaults "DEFAULT_LIST"

mktmps

disable gcc44_workaround
# Checking CC version...
# gcc-3.0 merges optimizations coming from egcs, pgcc, agcc, ...
  echocheck "$cc version"
  # also check for name (the version checking is only for _gcc_ up for now)
  # FIXME implement this in ver. check.
  cc_name=`$cc -v 2>&1 | tail -n 1 | cut -d ' ' -f 1`
  cc_version=`$cc -dumpversion`
  cc_v=$cc_version
  case $cc_version in
    4.[4-9]|4.[4-9].[0-9])
      enable gcc44_workaround
      ;;
    3.[3-9]|3.[2-9].[3-9]|4.[0-3]|4.[0-3].[0-9])
      ;;
    *)
      die "*** Bad gcc-$cc_version: Please upgrade C compiler at least to gcc-3.2.3+! ***"
      ;;
  esac
  echores "$cc_version"
# now that we know what compiler should be used for compilation, try to find
# out which assembler is used by the $cc compiler
if cygwin ; then
prefix="."
fi

if cygwin ; then
# Keep everything in .exe folder
test -z "$datadir" && datadir="."
test -z "$confdir" && confdir="."
test -z "$libdir" && libdir="."
fi

guess_target config.mak config.h
test_optimizations config.mak config.h

# checking for a working awk, I'm using mawk first, because it's fastest - atmos
echocheck "awk"
if ! test -z $AWK ; then
 awk=$AWK
else
 awk=
for i in "gawk" "nawk" "awk" "mawk" ; do
  if ( $i 'BEGIN{testme();}function testme(){print"";}' ) >> "$TMPLOG" 2>&1; then
    awk=$i
    break
  fi
done
fi
echores $awk
test -z $awk && die "VIDIX needs Awk. Try download it from: ftp://ftp.gnu.org/gnu/gawk/"

require2 mmap "sys/types.h sys/mman.h" mmap
mman_h=$mmap
print_config HAVE_SYS_ config.h config.mak mman_h
enabled mmap	&& check_func2 "sys/mman.h" mlock
print_config HAVE_ config.h config.mak mlock

require2 malloc_h "malloc.h" malloc
print_config HAVE_ config.h config.mak malloc_h

enabled malloc_h	&& require2 memaling "malloc.h" memalign
print_config HAVE_ config.h config.mak memalign

check_sheader ivtv_h "linux/ivtv.h"
print_config HAVE_ config.h config.mak ivtv_h

print_config VIDIX_ config.h config.mak static
print_config VIDIX_ config.h config.mak shared

if enabled shared ; then
require2 libdl dlfcn.h dlsym -ldl || die "dynamic loader was not found"
print_config HAVE_ config.h config.mak libdl
fi

test "$debug" != "0" && def_debug='#define VIDIX_DEBUG 1' || def_debug='#undef VIDIX_DEBUG'

CXXFLAGS="$CFLAGS -Weffc++"
LDXXFLAGS="$LDFLAGS"
#############################################################################
echo "Creating config.mak"
cat >> config.mak << EOF
# -------- Generated by configure -----------
prefix = $prefix
DATADIR = $datadir
CONFDIR = $confdir
LIBDIR = $libdir
DESTDIR = $DESTDIR
OPTFLAGS = $CFLAGS
OPTXXFLAGS = $CXXFLAGS
LDFLAGS = $LDFLAGS
LDXXFLAGS = $LDXXFLAGS
AR = ar
CC = $cc
CXX = $cxx
AWK = $awk
LDCONFIG=$ldconfig
INSTALL=$install

VIDIX_VERSION_MAJOR = $VERSION_MAJOR
VIDIX_VERSION_MINOR = $VERSION_MINOR
VIDIX_VERSION_MICRO = $VERSION_MICRO
VIDIX_VERSION = $VERSION_MAJOR.$VERSION_MINOR.$VERSION_MICRO
EOF

_lc_build_os=`echo $system_name | tr [:lower:] [:upper:]`

#############################################################################
echo "Creating config.h"
cat >> config.h << EOF
/* -------- This file has been automatically generated by configure --------- */
/* DHA/vidix library version number */
#define VIDIX_VERSION_MAJOR $VERSION_MAJOR
#define VIDIX_VERSION_MINOR $VERSION_MINOR
#define VIDIX_VERSION_MICRO $VERSION_MICRO
#define VIDIX_VERSION_NUMBER "$VERSION_MAJOR.$VERSION_MINOR.$VERSION_MICRO"

/* Toggles debugging informations */
$def_debug

/* Common data directory (for fonts, etc) */
#define USR_PREFIX "$prefix"
#define DATADIR "$datadir"
#define CONFDIR "$confdir"
#define LIBDIR "$libdir"
EOF

# Last move:
rmtmps
