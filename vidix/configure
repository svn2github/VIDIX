#!/bin/sh

. ./functions

# DHA/vidix version number
VERSION_MAJOR=1
VERSION_MINOR=0
VERSION_MICRO=0

for parm in "$@" ; do
  if test "$parm" = "--help" || test "$parm" = "-help" || test "$parm" = "-h" ; then
    cat << EOF

Usage: $0 [OPTIONS]...

Configuration:
  -h, --help               display this help and exit

Installation directories:
  --prefix=DIR           use this prefix for installing vidix [/usr/local]
  --datadir=DIR          use this prefix for installing machine independent
                         data files [PREFIX/share/vidix]
  --confdir=DIR          use this prefix for installing configuration files
                         [same as datadir]
  --libdir=DIR           use this prefix for installing shared objects
                         [same as datadir]

System types:
  --build=BUILD          configure for building on BUILD [guessed]
  --host=HOST            cross-compile to build program to run on HOST [BUILD]

Use these options if autodetection fails:
  --with-extraincdir=DIR   extra headers in DIR
  --with-extralibdir=DIR   extra library files in DIR
  --with-extraldflags=LIST extra LDFLAGS

Use these options if autodetection fails:
  --enable-static        build as static library
  --disable-static       don't build as static library
  --enable-shared        build as shared library
  --disable-shared       don't build as shared library

Miscellaneous options:
  --cc=COMPILER          use this C compiler to build VIDIX [gcc]

Environment variables:
  MAKE      Make command (example: "make -j")
  AS        Assembler command
  CC        C compiler command (example: "gcc -m64 -mveclibabi=acml")
  CFLAGS    C compiler flags (example:
             "-O3 -msse -msse2 -msse3 -mfpmath=387,sse -mfancy-math-387
              -ffast-math -funroll-all-loops -ftree-loop-optimize
              -ftree-vect-loop-version -ftree-vectorize -fomit-frame-pointer
              -finline-functions-called-once -funit-at-a-time -pipe")
  LDFLAGS   linker flags, e.g. -L<lib dir> if you have libraries in a
            nonstandard directory <lib dir>
  LIBS      specifies additional libs (like: export LIBS=-lacml_mv)
  DESTDIR   specifies base of installation

EOF
    exit 0
  fi
done # for parm in ...

# LGB: temporary files
for I in "$TMPDIR" "$TEMPDIR" "/tmp" ; do
  test "$I" && break
done

TMPLOG="configure.log"
rm -f "$TMPLOG"
TMPC="$I/vidix-conf-$RANDOM-$$.c"
TMPCPP="$I/vidix-conf-$RANDOM-$$.cpp"
TMPO="$I/vidix-conf-$RANDOM-$$.o"
TMPS="$I/vidix-conf-$RANDOM-$$.S"

_cc=gcc
test "$CC" && _cc="$CC"
_prefix="/usr/local"
_profile=
_debug=
_fastcall=auto
# return result to parent script
for ac_option do
  case "$ac_option" in
  --prefix=*)
    _prefix=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --datadir=*)
    _datadir=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --confdir=*)
    _confdir=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --libdir=*)
    _libdir=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --with-extraincdir=*)
    _inc_extra=-I`echo $ac_option | cut -d '=' -f 2 | sed 's,:, -I,g'`
    ;;
  --with-extralibdir=*)
    _ld_extra=-L`echo $ac_option | cut -d '=' -f 2 | sed 's,:, -L,g'`
    ;;
  --with-extraldflags=*)
    _exld_flags="$_exld_flags -L`echo $ac_option | cut -d '=' -f 2 | sed 's,:, -L,g'`"
    ;;
  --build=*)
    _build=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --host=*)
    _host=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --cc=*)
    _cc=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --enable-static)
    _static=yes
    ;;
  --disable-static)
    _static=no
    ;;
  --enable-shared)
    _shared=yes
    ;;
  --disable-shared)
    _shared=no
    ;;
  *)
    ;;
  esac
done

mktmps

guess_target config.mak config.h
test_optimizations config.mak config.h

test -n "$_ld_extra"	&& add_extralibs $_ld_extra
test -n "$_exld_flags"	&& add_ldflags $_exld_flags
test -n "$_inc_extra"	&& add_cflags $_inc_extra

if cygwin ; then
# Keep everything in .exe folder
test -z "$_datadir" && _datadir="."
test -z "$_confdir" && _confdir="."
test -z "$_libdir" && _libdir="."
else
test -z "$_datadir" && _datadir="$_prefix/share/"
test -z "$_confdir" && _confdir="$_datadir"
test -z "$_libdir" && _libdir="$_prefix/lib"
fi

# checking for a working awk, I'm using mawk first, because it's fastest - atmos
_awk=
_awk_verc_fail=yes
echores "Checking for "awk"..."
for _awk in  gawk nawk awk mawk; do
  if ( $_awk 'BEGIN{testme();}function testme(){print"";}' ) >> "$TMPLOG" 2>&1; then
    _awk_verc_fail=no
    break
  fi
done
test "$_awk_verc_fail" = yes && _awk=no
echores "$_awk"
if test "$_awk_verc_fail" = yes; then
echo "VIDIX needs Awk, but there was no working implementation found!"
echo "Try the GNU implementation, which can be downloaded from:"
die  "ftp://ftp.gnu.org/gnu/gawk/"
fi

require2 libdl dlfcn.h dlsym -ldl ||  die "dynamic loader was not found"
print_config HAVE_ config.h config.mak libdl

require2 mmap "sys/types.h sys/mman.h" mmap
mman_h=$mmap
print_config HAVE_SYS_ config.h config.mak mman_h
enabled mmap	&& check_func2 "sys/mman.h" mlock
print_config HAVE_ config.h config.mak mlock

require2 malloc_h "malloc.h" malloc
print_config HAVE_ config.h config.mak malloc_h

enabled malloc_h	&& require2 memaling "malloc.h" memalign
print_config HAVE_ config.h config.mak memalign

check_sheader ivtv_h "linux/ivtv.h"
print_config HAVE_ config.h config.mak ivtv_h


_def_static=no
echocheck "static library build"
if test "$_static" = no; then
  _def_static=no
elif test "$_static" = yes; then
  _def_static=yes
fi
echores "$_def_static"

_def_shared=yes
echocheck "shared library build"
if test "$_shared" = no; then
  _def_shared=no
elif test "$_shared" = yes; then
  _def_shared=yes
fi
if test "$_def_static" = no -a "$_def_shared" = no; then
  _def_shared=yes
fi
echores "$_def_shared"

#############################################################################
echo "Creating config.mak"
cat >> config.mak << EOF
# -------- Generated by configure -----------
prefix = $_prefix
DATADIR = $_datadir
CONFDIR = $_confdir
LIBDIR = $_libdir
DESTDIR = $DESTDIR
OPTFLAGS = $CFLAGS
LDFLAGS = $LDFLAGS
AR = ar
CC = $_cc
AWK = $_awk
LDCONFIG=$_ld_config
INSTALL=$_install
VIDIX_BUILD_STATIC = $_def_static
VIDIX_BUILD_SHARED = $_def_shared

VIDIX_VERSION_MAJOR = $VERSION_MAJOR
VIDIX_VERSION_MINOR = $VERSION_MINOR
VIDIX_VERSION_MICRO = $VERSION_MICRO
VIDIX_VERSION = $VERSION_MAJOR.$VERSION_MINOR.$VERSION_MICRO
EOF

_lc_build_os=`echo $system_name | tr [:lower:] [:upper:]`

#############################################################################
echo "Creating config.h"
cat >> config.h << EOF
/* -------- This file has been automatically generated by configure --------- */
/* DHA/vidix library version number */
#define VIDIX_VERSION_MAJOR $VERSION_MAJOR
#define VIDIX_VERSION_MINOR $VERSION_MINOR
#define VIDIX_VERSION_MICRO $VERSION_MICRO
#define VIDIX_VERSION_NUMBER "$VERSION_MAJOR.$VERSION_MINOR.$VERSION_MICRO"

/* Toggles debugging informations */
$_def_debug

/* Common data directory (for fonts, etc) */
#define USR_PREFIX "$_prefix"
#define DATADIR "$_datadir"
#define CONFDIR "$_confdir"
#define LIBDIR "$_libdir"
EOF

# Last move:
rm -f "$TMPO" "$TMPC" "$TMPS" "$TMPCPP"
